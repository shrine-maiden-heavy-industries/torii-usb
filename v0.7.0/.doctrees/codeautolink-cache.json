{
  "changelog": [],
  "features": [],
  "gateware/index": [],
  "gateware/interface/gateware/index": [],
  "gateware/interface/gateware/phy": [],
  "gateware/interface/gateware/receiver": [],
  "gateware/interface/gateware/transmitter": [],
  "gateware/interface/index": [],
  "gateware/interface/pipe": [],
  "gateware/interface/serdes/ecp5": [],
  "gateware/interface/serdes/index": [],
  "gateware/interface/serdes/lfps": [],
  "gateware/interface/serdes/xc7": [],
  "gateware/interface/ulpi": [],
  "gateware/interface/utmi": [],
  "gateware/stream/index": [],
  "gateware/usb/index": [],
  "gateware/usb/request": [],
  "gateware/usb/stream": [],
  "gateware/usb/usb2/control": [],
  "gateware/usb/usb2/descriptor": [],
  "gateware/usb/usb2/deserializer": [],
  "gateware/usb/usb2/device": [],
  "gateware/usb/usb2/endpoint": [],
  "gateware/usb/usb2/endpoints": [],
  "gateware/usb/usb2/index": [],
  "gateware/usb/usb2/interfaces": [],
  "gateware/usb/usb2/packet": [],
  "gateware/usb/usb2/request": [],
  "gateware/usb/usb2/reset": [],
  "gateware/usb/usb2/transfer": [],
  "gateware/usb/usb3/application": [],
  "gateware/usb/usb3/device": [],
  "gateware/usb/usb3/endpoints": [],
  "gateware/usb/usb3/index": [],
  "gateware/usb/usb3/link": [],
  "gateware/usb/usb3/physical": [],
  "gateware/usb/usb3/protocol": [],
  "gateware/usb/usb3/request": [],
  "getting_started": [],
  "index": [],
  "install": [
    {
      "source": ".. platform-picker::\n        .. platform-choice:: arch\n                :title: Arch Linux\n\n                .. code-block:: console\n\n                  $ sudo pacman -S python python-pip\n\n        .. platform-choice:: linux\n                :title: Other Linux\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                For `Debian <https://www.debian.org/>`_ based systems, use ``apt`` to install ``python3`` and ``python3-pip``\n\n                .. code-block:: console\n\n                        $ sudo apt install python3 python3-pip\n\n                For `Fedora <https://getfedora.org/>`_ and other ``dnf`` based systems,\n\n                .. code-block:: console\n\n                        $ sudo dnf install python3 python3-pip\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                Install `Homebrew <https://brew.sh/>`_ if not done already, then install the requirements.\n\n                .. code-block:: console\n\n                  $ brew install python\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                Download the latest Python installer from the `python downloads <https://www.python.org/downloads/>`_ page.\n\n                Follow the instructions and ensure that the installer installs ``pip`` and puts the python executable in your ``%PATH%``\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "installing-python",
        "headings": [
          "Installation",
          "Installing Prerequisites",
          "Installing Python"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: arch\n                :title: Arch Linux\n\n                On Arch Linux and Arch-likes, you can install nightly Yosys packages which are located in the `AUR <https://aur.archlinux.org/>`_ with an AUR helper or using ``makepkg`` directly.\n\n                Via an AUR helper like ``yay``\n\n                .. code-block:: console\n\n                  $ yay -S yosys-nightly\n\n                Via ``makepkg`` directly\n\n                .. code-block:: console\n\n                  $ git clone https://aur.archlinux.org/yosys-nightly.git\n                  $ (cd yosys-nightly && makepkg -sic)\n\n\n        .. platform-choice:: linux\n                :title: Other Linux\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                With other Linux distributions, it is recommended to use the `OSS Cad Suite <https://github.com/YosysHQ/oss-cad-suite-build>`_ nightly build. It provides a full environment of all the tools needed built on a nightly basis. This includes Yosys and GTKWave\n\n                Simply download the latest `release <https://github.com/YosysHQ/oss-cad-suite-build/releases>`_ for your architecture, extract it to a good home, and then add it to your ``$PATH``\n\n                .. code-block:: console\n\n                  $ curl -LOJ https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2022-04-26/oss-cad-suite-linux-x64-20240710.tgz\n                  $ tar xfv oss-cad-suite-linux-x64-20240710.tgz\n                  $ export PATH=\"`pwd`/oss-cad-suite/bin:$PATH\"\n\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                For macOS systems, it is recommended to use the YoWASP distribution of the toolchain. However if you want to use the native tools, and you are using an Intel based Mac, then the `OSS Cad Suite <https://github.com/YosysHQ/oss-cad-suite-build>`_ has nightly builds for x86_64 versions of Darwin. This includes Yosys and GTKWave\n\n                Simply download the latest `release <https://github.com/YosysHQ/oss-cad-suite-build/releases>`_ for your architecture, extract it to a good home, and then add it to your ``$PATH``\n\n                .. code-block:: console\n\n                  $ curl -LOJ https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2022-04-26/oss-cad-suite-darwin-x64-20240710.tgz\n                  $ tar xfv oss-cad-suite-darwin-x64-220240710.tgz\n                  $ export PATH=\"`pwd`/oss-cad-suite/bin:$PATH\"\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                The `OSS Cad Suite <https://github.com/YosysHQ/oss-cad-suite-build>`_ has nightly builds for x86_64 versions of Windows. This includes Yosys and GTKWave\n\n                Simply download the latest `release <https://github.com/YosysHQ/oss-cad-suite-build/releases>`_ for your architecture, extract it to a good home, and then add it to your ``%PATH%``\n\n                .. code-block:: console\n\n                        $ call %cd%\\oss-cad-suite\\environment.bat\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "installing-yosys",
        "headings": [
          "Installation",
          "Installing Prerequisites",
          "Installing Yosys"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                .. code-block:: console\n\n                        $ pip3 install --user --upgrade torii\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                .. code-block:: console\n\n                        $ pip install --user --upgrade torii\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. code-block:: doscon\n\n                        > pip install --upgrade torii\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "installing-torii",
        "headings": [
          "Installation",
          "Installing Prerequisites",
          "Installing Torii"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                .. code-block:: console\n\n                        $ pip3 install --user --upgrade torii-usb\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                .. code-block:: console\n\n                        $ pip install --user --upgrade torii-usb\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. code-block:: doscon\n\n                        > pip install --upgrade torii-usb\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "latest-release",
        "headings": [
          "Installation",
          "Installing Torii-USB",
          "Latest release"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                .. code-block:: console\n\n                        $ pip3 install --user 'torii-usb @ git+https://github.com/shrine-maiden-heavy-industries/torii-usb.git'\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                .. code-block:: console\n\n                        $ pip install --user 'torii-usb @ git+https://github.com/shrine-maiden-heavy-industries/torii-usb.git'\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. code-block:: doscon\n\n                        > pip install \"torii-usb @ git+https://github.com/shrine-maiden-heavy-industries/torii-usb.git\"\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "development-snapshot",
        "headings": [
          "Installation",
          "Installing Torii-USB",
          "Development snapshot"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                To install an editable development snapshot of Torii-USB for the first time, run:\n\n                .. code-block:: console\n\n                        $ git clone https://github.com/shrine-maiden-heavy-industries/torii-usb\n                        $ cd torii-usb\n                        $ pip3 install --user --editable '.'\n\n                Any changes made to the ``torii-usb`` directory will immediately affect any code that uses Torii-USB. To update the snapshot, run:\n\n                .. code-block:: console\n\n                        $ cd tori-usb\n                        $ git pull --ff-only origin main\n                        $ pip3 install --user --editable '.'\n\n                Run the ``pip3 install --editable .`` command each time the editable development snapshot is updated in case package dependencies have been added or changed. Otherwise, code using Torii-USB may misbehave or crash with an ``ImportError``.\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                To install an editable development snapshot of Torii-USB for the first time, run:\n\n                .. code-block:: console\n\n                        $ git clone https://github.com/shrine-maiden-heavy-industries/torii-usb\n                        $ cd torii-usb\n                        $ pip install --user --editable '.'\n\n                Any changes made to the ``torii-usb`` directory will immediately affect any code that uses Torii-USB. To update the snapshot, run:\n\n                .. code-block:: console\n\n                        $ cd torii-usb\n                        $ git pull --ff-only origin main\n                        $ pip install --user --editable '.'\n\n                Run the ``pip install --editable .`` command each time the editable development snapshot is updated in case package dependencies have been added or changed. Otherwise, code using Torii-USB may misbehave or crash with an ``ImportError``.\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                To install an editable development snapshot of Torii-USB for the first time, run:\n\n                .. code-block:: doscon\n\n                        > git clone https://github.com/shrine-maiden-heavy-industries/torii-usb\n                        > cd torii-usb\n                        > pip install --editable .\n\n                Any changes made to the ``torii-usb`` directory will immediately affect any code that uses Torii-USB. To update the snapshot, run:\n\n                .. code-block:: doscon\n\n                        > cd sol\n                        > git pull --ff-only origin main\n                        > pip install --editable .\n\n                Run the ``pip install --editable .`` command each time the editable development snapshot is updated in case package dependencies have been added or changed. Otherwise, code using Torii-USB may misbehave or crash with an ``ImportError``.\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "editable-development-snapshot",
        "headings": [
          "Installation",
          "Installing Torii-USB",
          "Editable development snapshot"
        ]
      },
      "doc_lineno": null
    }
  ],
  "intro": [],
  "migration": [
    {
      "source": "from sol_usb.usb2                      import USBDevice\nfrom sol_usb.gateware.usb.usb2.request import USBRequestHandler, SetupPacket\nfrom sol_usb.gateware.usb.stream       import USBInStreamInterface, USBOutStreamInterface\nfrom sol_usb.gateware.stream.generator import StreamSerializer\n",
      "names": [],
      "example": {
        "document": "migration",
        "ref_id": "updating-imports",
        "headings": [
          "Migration Guide",
          "Updating Imports"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": "from torii_usb.usb2             import USBDevice\nfrom torii_usb.usb.usb2.request import USBRequestHandler, SetupPacket\nfrom torii_usb.usb.stream       import USBInStreamInterface, USBOutStreamInterface\nfrom torii_usb.stream.generator import StreamSerializer\n\n",
      "names": [
        {
          "import_components": [
            "torii_usb",
            "usb2",
            "USBDevice"
          ],
          "code_str": "USBDevice",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "torii_usb.usb.usb2.device.USBDevice"
        },
        {
          "import_components": [
            "torii_usb",
            "usb",
            "usb2",
            "request"
          ],
          "code_str": "torii_usb.usb.usb2.request",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "torii_usb.usb.usb2.request"
        },
        {
          "import_components": [
            "torii_usb",
            "usb",
            "usb2",
            "request",
            "USBRequestHandler"
          ],
          "code_str": "USBRequestHandler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torii_usb.usb.usb2.request.USBRequestHandler"
        },
        {
          "import_components": [
            "torii_usb",
            "usb",
            "usb2",
            "request",
            "SetupPacket"
          ],
          "code_str": "SetupPacket",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torii_usb.usb.request.interface.SetupPacket"
        },
        {
          "import_components": [
            "torii_usb",
            "usb",
            "stream"
          ],
          "code_str": "torii_usb.usb.stream",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "torii_usb.usb.stream"
        },
        {
          "import_components": [
            "torii_usb",
            "usb",
            "stream",
            "USBInStreamInterface"
          ],
          "code_str": "USBInStreamInterface",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "torii_usb.usb.stream.USBInStreamInterface"
        },
        {
          "import_components": [
            "torii_usb",
            "usb",
            "stream",
            "USBOutStreamInterface"
          ],
          "code_str": "USBOutStreamInterface",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "torii_usb.usb.stream.USBOutStreamInterface"
        },
        {
          "import_components": [
            "torii_usb",
            "stream",
            "generator"
          ],
          "code_str": "torii_usb.stream.generator",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "torii_usb.stream.generator"
        },
        {
          "import_components": [
            "torii_usb",
            "stream",
            "generator",
            "StreamSerializer"
          ],
          "code_str": "StreamSerializer",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "torii_usb.stream.generator.StreamSerializer"
        }
      ],
      "example": {
        "document": "migration",
        "ref_id": "updating-imports",
        "headings": [
          "Migration Guide",
          "Updating Imports"
        ]
      },
      "doc_lineno": 25
    }
  ],
  "tutorials/index": []
}